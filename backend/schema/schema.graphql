# User Type
type User {
  id: ID!
  firebaseUid: String!
  name: String!
  email: String!
  avatar: String
  tasks: [Task!]!
  studySessions: [StudySession!]!
  preferences: UserPreferences!
  stats: UserStats!
  createdAt: String!
  updatedAt: String!
  lastLoginAt: String
}

# Task Type
type Task {
  id: ID!
  title: String!
  description: String
  completed: Boolean!
  priority: Priority!
  dueDate: String
  category: String!
  tags: [String!]!
  estimatedMinutes: Int
  createdAt: String!
  updatedAt: String!
}

# Study Session Type
type StudySession {
  id: ID!
  subject: String!
  topic: String!
  duration: Int! # in minutes
  notes: String
  difficulty: Difficulty!
  completed: Boolean!
  startTime: String
  endTime: String
  createdAt: String!
  updatedAt: String!
}

# User Preferences Type
type UserPreferences {
  theme: Theme!
  notifications: Boolean!
  dailyStudyGoal: Int!
  timezone: String!
}

# User Statistics Type
type UserStats {
  totalStudyTime: Int!
  totalTasks: Int!
  completedTasks: Int!
  currentStreak: Int!
  longestStreak: Int!
  taskCompletionRate: Float!
  averageSessionDuration: Float!
}

# Task Statistics Type
type TaskStats {
  total: Int!
  completed: Int!
  pending: Int!
  completionRate: Int!
  byPriority: PriorityStats!
  byCategory: [CategoryStats!]!
}

type PriorityStats {
  high: Int!
  medium: Int!
  low: Int!
}

type CategoryStats {
  category: String!
  count: Int!
  completed: Int!
}

# Authentication Payload
type AuthPayload {
  token: String!
  user: User!
}

# Enums
enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum Theme {
  LIGHT
  DARK
}

enum TaskFilter {
  ALL
  PENDING
  COMPLETED
  OVERDUE
  TODAY
  THIS_WEEK
}

# Input Types
input TaskInput {
  title: String!
  description: String
  priority: Priority = MEDIUM
  dueDate: String
  category: String = "general"
  tags: [String!] = []
  estimatedMinutes: Int
}

input TaskUpdateInput {
  title: String
  description: String
  completed: Boolean
  priority: Priority
  dueDate: String
  category: String
  tags: [String!]
  estimatedMinutes: Int
}

input StudySessionInput {
  subject: String!
  topic: String!
  duration: Int!
  notes: String
  difficulty: Difficulty!
  completed: Boolean = false
}

input StudySessionUpdateInput {
  subject: String
  topic: String
  duration: Int
  notes: String
  difficulty: Difficulty
  completed: Boolean
  startTime: String
  endTime: String
}

input UserPreferencesInput {
  theme: Theme
  notifications: Boolean
  dailyStudyGoal: Int
  timezone: String
}

# Queries
type Query {
  # User queries
  me: User
  
  # Task queries
  tasks(
    filter: TaskFilter = ALL
    category: String
    priority: Priority
    limit: Int = 50
    offset: Int = 0
  ): [Task!]!
  
  task(id: ID!): Task
  taskStats: TaskStats!
  
  # Study Session queries
  studySessions(
    limit: Int = 20
    offset: Int = 0
  ): [StudySession!]!
  
  studySession(id: ID!): StudySession
  recentSessions(limit: Int = 5): [StudySession!]!
  
  # Health check
  health: String
}

# Mutations
type Mutation {
  # Authentication mutations
  loginWithGoogle(idToken: String!): AuthPayload!
  
  # Task mutations
  createTask(input: TaskInput!): Task!
  updateTask(id: ID!, input: TaskUpdateInput!): Task!
  deleteTask(id: ID!): Boolean!
  toggleTaskComplete(id: ID!): Task!
  
  # Bulk task operations
  createMultipleTasks(tasks: [TaskInput!]!): [Task!]!
  deleteMultipleTasks(ids: [ID!]!): Boolean!
  markMultipleTasksComplete(ids: [ID!]!): [Task!]!
  
  # Study Session mutations
  createStudySession(input: StudySessionInput!): StudySession!
  updateStudySession(id: ID!, input: StudySessionUpdateInput!): StudySession!
  deleteStudySession(id: ID!): Boolean!
  startStudySession(subject: String!, topic: String!): StudySession!
  endStudySession(id: ID!, notes: String, difficulty: Difficulty): StudySession!
  
  # User mutations
  updateProfile(name: String, avatar: String): User!
  updatePreferences(input: UserPreferencesInput!): User!
  
  # Utility mutations
  resetUserData: Boolean!
  exportUserData: String! # Returns JSON string of user data
}

# Subscriptions (for real-time updates)
type Subscription {
  taskUpdated: Task!
  taskCreated: Task!
  taskDeleted: ID!
  studySessionUpdated: StudySession!
}