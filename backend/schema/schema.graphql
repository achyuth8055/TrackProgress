# User Type
type User {
  id: ID!
  firebaseUid: String!
  name: String!
  email: String!
  avatar: String
  createdAt: String!
  updatedAt: String!
}

# Authentication Payload
type AuthPayload {
  token: String!
  user: User!
}

# Study Session Type
type StudySession {
  id: ID!
  userId: ID!
  subject: String!
  topic: String!
  duration: Int! # in minutes
  notes: String
  difficulty: Difficulty!
  completed: Boolean!
  createdAt: String!
  updatedAt: String!
}

# Study Goal Type
type StudyGoal {
  id: ID!
  userId: ID!
  title: String!
  description: String
  targetHours: Float!
  currentHours: Float!
  deadline: String
  completed: Boolean!
  createdAt: String!
  updatedAt: String!
}

# Subject Type
type Subject {
  id: ID!
  userId: ID!
  name: String!
  color: String
  totalHours: Float!
  sessionsCount: Int!
  createdAt: String!
  updatedAt: String!
}

# Study Statistics Type
type StudyStats {
  totalHours: Float!
  totalSessions: Int!
  averageSessionDuration: Float!
  currentStreak: Int!
  longestStreak: Int!
  todayHours: Float!
  weekHours: Float!
  monthHours: Float!
  subjectBreakdown: [SubjectStats!]!
}

type SubjectStats {
  subject: String!
  hours: Float!
  sessions: Int!
  percentage: Float!
}

# Enums
enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum TimeRange {
  TODAY
  WEEK
  MONTH
  YEAR
  ALL_TIME
}

# Input Types
input StudySessionInput {
  subject: String!
  topic: String!
  duration: Int!
  notes: String
  difficulty: Difficulty!
}

input StudySessionUpdateInput {
  subject: String
  topic: String
  duration: Int
  notes: String
  difficulty: Difficulty
  completed: Boolean
}

input StudyGoalInput {
  title: String!
  description: String
  targetHours: Float!
  deadline: String
}

input StudyGoalUpdateInput {
  title: String
  description: String
  targetHours: Float
  deadline: String
  completed: Boolean
}

input SubjectInput {
  name: String!
  color: String
}

# Queries
type Query {
  # User queries
  me: User

  # Study Session queries
  studySessions(limit: Int, offset: Int): [StudySession!]!
  studySession(id: ID!): StudySession
  recentSessions(limit: Int): [StudySession!]!
  sessionsBySubject(subject: String!): [StudySession!]!
  sessionsByTimeRange(timeRange: TimeRange!): [StudySession!]!

  # Study Goal queries
  studyGoals: [StudyGoal!]!
  studyGoal(id: ID!): StudyGoal
  activeGoals: [StudyGoal!]!
  completedGoals: [StudyGoal!]!

  # Subject queries
  subjects: [Subject!]!
  subject(id: ID!): Subject
  topSubjects(limit: Int): [Subject!]!

  # Statistics queries
  studyStats(timeRange: TimeRange): StudyStats!
  dailyProgress(days: Int): [DailyProgress!]!
  weeklyProgress(weeks: Int): [WeeklyProgress!]!
  monthlyProgress(months: Int): [MonthlyProgress!]!
}

# Progress Types
type DailyProgress {
  date: String!
  hours: Float!
  sessions: Int!
}

type WeeklyProgress {
  week: String!
  hours: Float!
  sessions: Int!
}

type MonthlyProgress {
  month: String!
  hours: Float!
  sessions: Int!
}

# Mutations
type Mutation {
  # Authentication mutations
  signup(
    firebaseUid: String!
    name: String!
    email: String!
    avatar: String
  ): AuthPayload!

  login(
    firebaseUid: String!
    email: String!
  ): AuthPayload!

  updateProfile(
    name: String
    avatar: String
  ): User!

  # Study Session mutations
  createStudySession(input: StudySessionInput!): StudySession!
  updateStudySession(id: ID!, input: StudySessionUpdateInput!): StudySession!
  deleteStudySession(id: ID!): Boolean!
  startStudySession(subject: String!, topic: String!): StudySession!
  endStudySession(id: ID!, notes: String, difficulty: Difficulty): StudySession!

  # Study Goal mutations
  createStudyGoal(input: StudyGoalInput!): StudyGoal!
  updateStudyGoal(id: ID!, input: StudyGoalUpdateInput!): StudyGoal!
  deleteStudyGoal(id: ID!): Boolean!
  completeStudyGoal(id: ID!): StudyGoal!

  # Subject mutations
  createSubject(input: SubjectInput!): Subject!
  updateSubject(id: ID!, name: String, color: String): Subject!
  deleteSubject(id: ID!): Boolean!

  # Utility mutations
  resetProgress: Boolean!
  exportData: String! # Returns JSON string of user data
}

# Subscriptions (optional, for real-time updates)
type Subscription {
  studySessionUpdated: StudySession!
  goalCompleted: StudyGoal!
  newPersonalRecord: StudyStats!
}
type Mutation {
  # Authentication mutations
  signup(
    firebaseUid: String!
    name: String!
    email: String!
    avatar: String
  ): AuthPayload!

  login(
    firebaseUid: String!
    email: String!
  ): AuthPayload!

  # Add this missing mutation
  loginWithGoogle(
    idToken: String!
  ): AuthPayload!

  updateProfile(
    name: String
    avatar: String
  ): User!

  
}
